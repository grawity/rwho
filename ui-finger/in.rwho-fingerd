#!/usr/bin/php
<?php
namespace RWho;
require_once(__DIR__."/../lib-php/util.php");
require_once(__DIR__."/../lib-php/client_app.php");

function get_rhost() {
	$addr = @$_SERVER["REMOTE_ADDR"];
	if (!isset($addr))
		$addr = @$_ENV["REMOTE_HOST"];
	if (!isset($addr))
		$addr = @$_ENV["REMOTEHOST"];
	if (!isset($addr) && defined("STDIN"))
		$addr = stream_socket_get_name(constant("STDIN"), true);
	/* Strip v6mapped prefix added by xinetd */
	if (isset($addr) && $addr !== false)
		$addr = preg_replace("/^::ffff:/", "", $addr);
	return $addr;
}

function finger_parse($input) {
	$input = rtrim($input, "\r\n");
	if ($input === "/W" or substr($input, 0, 3) === "/W ") {
		$query = substr($input, 3);
		$detailed = true;
	} else {
		$query = $input;
		$detailed = false;
	}
	return array($query, $detailed);
}

class RWhoFingerServer extends \RWho\ClientApplicationBase {
	function output($data, $detailed=false) {
		if ($detailed) {
			$fmt = "%-12s %1s %-22s %-10s %s\r\n";
			$headers = array("USER", "", "HOST", "LINE", "FROM");
		} else {
			$fmt = "%-12s %-12s %-10s %s\r\n";
			$headers = array("USER", "HOST", "LINE", "FROM");
		}

		vprintf($fmt, $headers);

		$last = array("user" => null);
		foreach ($data as $row) {
			$line = array();
			$flag = "";

			if ($this->client->is_stale($row["updated"])) {
				if (!$detailed)
					continue;
				$flag = "?";
			}
			elseif ($row["uid"] == 0)
				$flag = "#";
			elseif ($row["uid"] < 25000)
				$flag = "<";

			$line[] = ($row["user"] === $last["user"]) ? "" : $row["user"];

			if ($detailed)
				$line[] = $flag;

			$line[] = $detailed
					? $row["host"]
					: substr(strip_domain($row["host"]), 0, 12);

			$line[] = $row["is_summary"]
					? "{".$row["line"]."}"
					: $row["line"];

			if ($detailed)
				$line[] = $row["rhost"];
			else {
				$len = strlen($row["rhost"]);
				if ($len > 40)
					$line[] = substr($row["rhost"], 0, 39).">";
				elseif ($len > 0)
					$line[] = $row["rhost"];
				else
					$line[] = "(local)";
			}

			vprintf($fmt, $line);

			$last = $row;
		}
	}

	function output_hosts($data) {
		$fmt = "%-12s %-26s %-5s %-5s %s\r\n";
		$headers = array("HOST", "DOMAIN NAME", "#USR", "#CON", "UPDATED");

		vprintf($fmt, $headers);

		foreach ($data as $row) {
			printf($fmt,
				substr(strip_domain($row["host"]), 0, 12),
				$row["host"],
				$row["users"],
				$row["entries"],
				interval($row["last_update"])
			);
		}
	}

	function output_plan($user, $host) {
		$text = $this->client->get_plan_file($user, $host);
		if ($text === null)
			return;

		print("\r\n");
		print(str_pad("--- Plan ---", 79, "-", STR_PAD_RIGHT)."\r\n");

		foreach (preg_split('/\r?\n/', $text) as $line)
			print("$line\r\n");
	}

	function handle_query($input) {
		list ($query, $detailed) = finger_parse($input);

		$rhost = get_rhost();
		$access = $this->_check_access($rhost);

		if ($this->config->get_bool("finger.log", true)) {
			$log_accepted = ($access) ? "accepted" : "refused";
			$log_qry = rtrim($input, "\r\n");
			$log_msg = "query \"".addcslashes($log_qry, "\000..\037\\")."\"";
			syslog(LOG_INFO, "$log_accepted $log_msg from $rhost");
		}

		if (!$access)
			die("Access denied.\r\n");

		// special "list hosts" query

		if ($query === "*") {
			$data = $this->client->retrieve_hosts();
			if (!count($data))
				die("No active hosts.\r\n");
			$this->output_hosts($data);
			if ($detailed) {
				$n_users = $this->client->count_users();
				$n_conns = $this->client->count_conns();
				$n_hosts = count($data);
				print("\r\n");
				printf("(%d users over %d connections on %d hosts)\r\n",
					$n_users, $n_conns, $n_hosts);
			}
			return;
		}

		// normal queries

		list ($q_user, $q_host) = parse_query($query);
		$hide_rhost = ($access <= AC_LIMITED);

		$has_user = strlen($q_user);
		$has_host = strlen($q_host);

		$data = $this->client->retrieve($q_user, $q_host, $hide_rhost);

		// display login info

		if (count($data)) {
			if (!$detailed)
				$data = $this->client->summarize($data);
			$this->output($data, $detailed);
		} else {
			if ($has_user && $has_host)
				printf("finger: '%s' is not logged in to %s.\r\n",
					$q_user, $q_host);
			elseif ($has_user)
				printf("finger: '%s' is not logged in.\r\n",
					$q_user);
			elseif ($has_host)
				printf("finger: Nobody is logged in to %s.\r\n",
					$q_host);
			else
				print("finger: Nobody is logged in.\r\n");
		}

		// display stats

		if ($detailed && !$has_user && !$has_host) {
			$n_users = $this->client->count_users();
			$n_conns = count($data);
			$n_hosts = $this->client->count_hosts();
			print("\r\n");
			printf("(%d users over %d connections on %d hosts)\r\n",
				$n_users, $n_conns, $n_hosts);
		}

		// display plan

		if ($has_user) {
			$this->output_plan($q_user, $q_host);
		}
	}
}

openlog("rwho-fingerd", null, LOG_DAEMON);

if (isset($_SERVER["REQUEST_URI"])) {
	header("Content-Type: text/plain");
	$input = $_SERVER["QUERY_STRING"];
	$input = urldecode($input);
} else {
	$input = fgets(STDIN) or die();
}

$fingerd = new RWhoFingerServer();
$fingerd->handle_query($input);
