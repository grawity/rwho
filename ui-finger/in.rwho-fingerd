#!/usr/bin/php
<?php
namespace RWho;
require_once(__DIR__."/../lib-php/librwho.php");
require_once(__DIR__."/../lib-php/config.php");
require_once(__DIR__."/../lib-php/client.php");

function finger_parse($input) {
	$input = rtrim($input, "\r\n");
	if ($input === "/W" or substr($input, 0, 3) === "/W ") {
		$query = substr($input, 3);
		$detailed = true;
	} else {
		$query = $input;
		$detailed = false;
	}
	return array($query, $detailed);
}

const AC_DENIED = 0;	// Deny access completely
const AC_LIMITED = 1;	// Show limited information (no rhost)
const AC_TRUSTED = 2;	// Show all information

class RWhoFingerServer {
	function __construct() {
		$this->config = new \RWho\Config\Configuration();
		$this->config->load(__DIR__."/../server.conf"); // for DB information
		$this->config->load(__DIR__."/../rwho.conf");

		$this->client = new \RWho\Client($this->config);
	}

	function _is_rhost_trusted($host) {
		$nets = $this->config->get_list("privacy.trusted_nets");
		foreach ($nets as $net) {
			if (ip_cidr($host, $net))
				return true;
		}
		return false;
	}

	function _check_access($rhost) {
		$anonymous = true;
		if ($this->_is_rhost_trusted($rhost)) {
			$anonymous = false;
		}
		if ($anonymous) {
			if ($this->config->get_bool("privacy.deny_anonymous", false))
				return AC_DENIED;
			elseif ($this->config->get_bool("privacy.hide_rhost", false))
				return AC_LIMITED;
			else
				return AC_TRUSTED;
		} else {
			return AC_TRUSTED;
		}
	}

	function handle_query($input) {
		list ($query, $detailed) = finger_parse($input);

		$rhost = get_rhost();
		$access = $this->_check_access($rhost);

		if ($this->config->get_bool("finger.log", true)) {
			$log_accepted = ($access) ? "accepted" : "refused";
			$log_qry = rtrim($input, "\r\n");
			$log_msg = "query \"".addcslashes($log_qry, "\000..\037\\")."\"";
			syslog(LOG_INFO, "$log_accepted $log_msg from $rhost");
		}

		if (!$access)
			die("Access denied.\r\n");

		// special "list hosts" query

		if ($query === "*") {
			$data = $this->client->retrieve_hosts();
			if (!count($data))
				die("No active hosts.\r\n");
			output_hosts($data);
			if ($detailed) {
				$n_users = count_users();
				$n_conns = count_conns();
				$n_hosts = count($data);
				print("\r\n");
				printf("(%d users over %d connections on %d hosts)\r\n",
					$n_users, $n_conns, $n_hosts);
			}
			return;
		}

		// normal queries

		list ($q_user, $q_host) = parse_query($query);
		$hide_rhost = ($access <= AC_LIMITED);

		$has_user = strlen($q_user);
		$has_host = strlen($q_host);

		$data = $this->client->retrieve($q_user, $q_host, $hide_rhost);

		// display login info

		if (count($data)) {
			if (!$detailed)
				$data = summarize($data);
			output($data, $detailed);
		} else {
			if ($has_user && $has_host)
				printf("finger: '%s' is not logged in to %s.\r\n",
					$q_user, $q_host);
			elseif ($has_user)
				printf("finger: '%s' is not logged in.\r\n",
					$q_user);
			elseif ($has_host)
				printf("finger: Nobody is logged in to %s.\r\n",
					$q_host);
			else
				print("finger: Nobody is logged in.\r\n");
		}

		// display stats

		if ($detailed && !$has_user && !$has_host) {
			$n_users = count_users();
			$n_conns = count($data);
			$n_hosts = count_hosts();
			print("\r\n");
			printf("(%d users over %d connections on %d hosts)\r\n",
				$n_users, $n_conns, $n_hosts);
		}

		// display plan

		if ($has_user) {
			output_plan($q_user, $q_host);
		}
	}
}

function output($data, $detailed=false) {
	if ($detailed) {
		$fmt = "%-12s %1s %-22s %-10s %s\r\n";
		$headers = array("USER", "", "HOST", "LINE", "FROM");
	} else {
		$fmt = "%-12s %-12s %-10s %s\r\n";
		$headers = array("USER", "HOST", "LINE", "FROM");
	}

	vprintf($fmt, $headers);

	$last = array("user" => null);
	foreach ($data as $row) {
		$line = array();
		$flag = "";

		if (is_stale($row["updated"])) {
			if (!$detailed)
				continue;
			$flag = "?";
		}
		elseif ($row["uid"] == 0)
			$flag = "#";
		elseif ($row["uid"] < 25000)
			$flag = "<";

		$line[] = ($row["user"] === $last["user"]) ? "" : $row["user"];

		if ($detailed)
			$line[] = $flag;

		$line[] = $detailed
				? $row["host"]
				: substr(strip_domain($row["host"]), 0, 12);

		$line[] = $row["is_summary"]
				? "{".$row["line"]."}"
				: $row["line"];

		if ($detailed)
			$line[] = $row["rhost"];
		else {
			$len = strlen($row["rhost"]);
			if ($len > 40)
				$line[] = substr($row["rhost"], 0, 39).">";
			elseif ($len > 0)
				$line[] = $row["rhost"];
			else
				$line[] = "(local)";
		}

		vprintf($fmt, $line);

		$last = $row;
	}
}

function output_hosts($data) {
	$fmt = "%-12s %-26s %-5s %-5s %s\r\n";
	$headers = array("HOST", "DOMAIN NAME", "#USR", "#CON", "UPDATED");

	vprintf($fmt, $headers);

	foreach ($data as $row) {
		printf($fmt,
			substr(strip_domain($row["host"]), 0, 12),
			$row["host"],
			$row["users"],
			$row["entries"],
			interval($row["last_update"])
		);
	}
}

function output_plan($user, $host) {
	$text = read_user_plan($user, $host);
	if ($text === null)
		return;

	print("\r\n");
	print(str_pad("--- Plan ---", 79, "-", STR_PAD_RIGHT)."\r\n");

	foreach (preg_split('/\r?\n/', $text) as $line)
		print("$line\r\n");
}

openlog("rwho-fingerd", null, LOG_DAEMON);

if (isset($_SERVER["REQUEST_URI"])) {
	header("Content-Type: text/plain");
	$input = $_SERVER["QUERY_STRING"];
	$input = urldecode($input);
} else {
	$input = fgets(STDIN) or die();
}

$fingerd = new RWhoFingerServer();
$fingerd->handle_query($input);
